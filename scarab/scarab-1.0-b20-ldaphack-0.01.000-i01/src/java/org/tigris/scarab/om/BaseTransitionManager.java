

package org.tigris.scarab.om;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.manager.AbstractBaseManager;
import org.apache.torque.manager.CacheListener;
import org.apache.torque.manager.MethodResultCache;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;

/**
 * This class manages Transition objects.
 * This class was autogenerated by Torque  *
 * You should not use this class directly.  It should not even be
 * extended all references should be to TransitionManager
 */
public abstract class BaseTransitionManager
    extends AbstractBaseManager
{
    /** The name of the manager */
    protected static String MANAGED_CLASS = "org.tigris.scarab.om.Transition";

    /** The name of our class to pass to Torque as the default manager. */
    protected static String DEFAULT_MANAGER_CLASS
        = "org.tigris.scarab.om.TransitionManager";

    /**
     * Retrieves an implementation of the manager, based on the settings in
     * the configuration.
     *
     * @return an implementation of TransitionManager.
     */
    public static TransitionManager getManager()
    {
        return (TransitionManager)
            Torque.getManager(TransitionManager.MANAGED_CLASS,
                TransitionManager.DEFAULT_MANAGER_CLASS);
    }

    /**
     * Static accessor for the @see #getInstanceImpl().
     *
     * @return a <code>Transition</code> value
     * @exception TorqueException if an error occurs
     */
    public static Transition getInstance()
        throws TorqueException
    {
        return getManager().getInstanceImpl();
    }

    /**
     * Static accessor for the @see #getInstanceImpl(ObjectKey).
     *
     * @param id an <code>ObjectKey</code> value
     * @return a <code>Transition</code> value
     * @exception TorqueException if an error occurs
     */
    public static Transition getInstance(ObjectKey id)
        throws TorqueException
    {
        return getManager().getInstanceImpl(id);
    }

    /**
     * Static accessor for the @see #getInstanceImpl(ObjectKey, boolean).
     *
     * @param id an <code>ObjectKey</code> value
     * @param fromCache if true, look for cached Transitions before loading
     * from storage.
     * @return a <code>Transition</code> value
     * @exception TorqueException if an error occurs
     */
    public static Transition getInstance(ObjectKey id, boolean fromCache)
        throws TorqueException
    {
        return getManager().getInstanceImpl(id, fromCache);
    }

    /**
     * Static accessor for the @see #getInstanceImpl(ObjectKey).
     *
     * @param id an <code>ObjectKey</code> value
     * @return a <code>Transition</code> value
     * @exception TorqueException if an error occurs
     */
    public static Transition getInstance(Integer id)
        throws TorqueException
    {
        return getManager().getInstanceImpl(SimpleKey.keyFor(id));
    }

    /**
     * Static accessor for the @see #getInstanceImpl(ObjectKey).
     *
     * @param id an <code>ObjectKey</code> value
     * @param fromCache if true, look for cached Transitions before loading
     * from storage.
     * @return a <code>Transition</code> value
     * @exception TorqueException if an error occurs
     */
    public static Transition getInstance(Integer id, boolean fromCache)
        throws TorqueException
    {
        return getManager().getInstanceImpl(SimpleKey.keyFor(id), fromCache);
    }

    /**
     * Static accessor for the @see #getInstancesImpl(List).
     *
     * @param ids a <code>List</code> value
     * @return a <code>List</code> value
     * @exception TorqueException if an error occurs
     */
    public static List getInstances(List ids)
        throws TorqueException
    {
        return getManager().getInstancesImpl(ids);
    }

    /**
     * Static accessor for the @see #getInstancesImpl(List, boolean).
     *
     * @param ids a <code>List</code> value
     * @param fromCache if true, look for cached Transitions before loading
     * from storage.
     * @return a <code>List</code> value
     * @exception TorqueException if an error occurs
     */
    public static List getInstances(List ids, boolean fromCache)
        throws TorqueException
    {
        return getManager().getInstancesImpl(ids, fromCache);
    }

    public static void putInstance(Persistent om)
        throws TorqueException
    {
        getManager().putInstanceImpl(om);
    }

    public static void clear()
        throws TorqueException
    {
        getManager().clearImpl();
    }

    public static boolean exists(Transition obj)
        throws TorqueException
    {
        return getManager().existsImpl(obj);
    }

    public static MethodResultCache getMethodResult()
    {
        return getManager().getMethodResultCache();
    }

    public static void addCacheListener(CacheListener listener)
    {
        getManager().addCacheListenerImpl(listener);
    }

    /**
     * Creates a new <code>BaseTransitionManager</code> instance.
     *
     * @exception TorqueException if an error occurs
     */
    public BaseTransitionManager()
        throws TorqueException
    {
        setClassName("org.tigris.scarab.om.Transition");
    }

    /**
     * Get a fresh instance of a TransitionManager
     */
    protected Transition getInstanceImpl()
        throws TorqueException
    {
        Transition obj = null;
        try
        {
            obj = (Transition) getOMInstance();
        }
        catch (Exception e)
        {
            throw new TorqueException(e);
        }
        return obj;
    }


    /**
     * Get a Transition with the given id.
     *
     * @param id <code>ObjectKey</code> value
     */
    protected Transition getInstanceImpl(ObjectKey id)
        throws TorqueException
    {
        return (Transition) getOMInstance(id);
    }

    /**
     * Get a Transition with the given id.
     *
     * @param id <code>ObjectKey</code> value
     * @param fromCache if true, look for cached Transitions before loading
     * from storage.
     */
    protected Transition getInstanceImpl(ObjectKey id, boolean fromCache)
        throws TorqueException
    {
        return (Transition) getOMInstance(id, fromCache);
    }

    /**
     * Gets a list of Transitions based on id's.
     *
     * @param ids a List of <code>ObjectKeys</code> value
     * @return a <code>List</code> of Transitions
     * @exception TorqueException if an error occurs
     */
    protected List getInstancesImpl(List ids)
        throws TorqueException
    {
        return getOMs(ids);
    }

    /**
     * Gets a list of Transitions based on id's.
     *
     * @param ids a List of <code>ObjectKeys</code> value
     * @param fromCache if true, look for cached Transitions before loading
     * from storage.
     * @return a <code>List</code> of Transitions
     * @exception TorqueException if an error occurs
     */
    protected List getInstancesImpl(List ids, boolean fromCache)
        throws TorqueException
    {
        return getOMs(ids, fromCache);
    }

    /**
     * check for a duplicate project name
     */
    protected boolean existsImpl(Transition om)
        throws TorqueException
    {
        Criteria crit = TransitionPeer
            .buildCriteria((Transition)om);
        return TransitionPeer.doSelect(crit).size() > 0;
    }


    protected Persistent retrieveStoredOM(ObjectKey id)
        throws TorqueException
    {
        return TransitionPeer.retrieveByPK(id);
    }

    /**
     * Gets a list of ModuleEntities based on id's.
     *
     * @param ids a <code>NumberKey[]</code> value
     * @return a <code>List</code> value
     * @exception TorqueException if an error occurs
     */
    protected List retrieveStoredOMs(List ids)
        throws TorqueException
    {
        return TransitionPeer.retrieveByPKs(ids);
    }
}
